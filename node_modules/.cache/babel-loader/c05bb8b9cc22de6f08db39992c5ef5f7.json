{"ast":null,"code":"import _defineProperty from\"/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/node_modules/@babel/runtime/helpers/esm/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{Component}from'react';import Node from'./Node/Node';import{dijkstra,getNodesInShortestPathOrder}from'../algorithms/dijkstra';import'./PathfindingVisualizer.css';var START_NODE_ROW=10;var START_NODE_COL=15;var FINISH_NODE_ROW=10;var FINISH_NODE_COL=35;var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(PathfindingVisualizer).call(this));_this.state={grid:[],mouseIsPressed:false};return _this;}_createClass(PathfindingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){var grid=getInitialGrid();this.setState({grid:grid});}},{key:\"handleMouseDown\",value:function handleMouseDown(row,col){var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true});}},{key:\"handleMouseEnter\",value:function handleMouseEnter(row,col){if(!this.state.mouseIsPressed)return;var newGrid=getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}},{key:\"handleMouseUp\",value:function handleMouseUp(){this.setState({mouseIsPressed:false});}},{key:\"animateDijkstra\",value:function animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){var _this2=this;var _loop=function _loop(i){if(i===visitedNodesInOrder.length){setTimeout(function(){_this2.animateShortestPath(nodesInShortestPathOrder);},10*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';},10*i);};for(var i=0;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestPathOrder){var _loop2=function _loop2(i){setTimeout(function(){var node=nodesInShortestPathOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';},50*i);};for(var i=0;i<nodesInShortestPathOrder.length;i++){_loop2(i);}}},{key:\"visualizeDijkstra\",value:function visualizeDijkstra(){var grid=this.state.grid;var startNode=grid[START_NODE_ROW][START_NODE_COL];var finishNode=grid[FINISH_NODE_ROW][FINISH_NODE_COL];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}},{key:\"render\",value:function render(){var _this3=this;var _this$state=this.state,grid=_this$state.grid,mouseIsPressed=_this$state.mouseIsPressed;return React.createElement(React.Fragment,null,React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeDijkstra();}},\"Visualize Dijkstra's Algorithm\"),React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,rowIdx){return React.createElement(\"div\",{key:rowIdx},row.map(function(node,nodeIdx){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return React.createElement(Node,{key:nodeIdx,col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseDown:function onMouseDown(row,col){return _this3.handleMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return _this3.handleMouseEnter(row,col);},onMouseUp:function onMouseUp(){return _this3.handleMouseUp();},row:row});}));})));}}]);return PathfindingVisualizer;}(Component);export{PathfindingVisualizer as default};var getInitialGrid=function getInitialGrid(){var grid=[];for(var row=0;row<20;row++){var currentRow=[];for(var col=0;col<50;col++){currentRow.push(createNode(col,row));}grid.push(currentRow);}return grid;};var createNode=function createNode(col,row){return{col:col,row:row,isStart:row===START_NODE_ROW&&col===START_NODE_COL,isFinish:row===FINISH_NODE_ROW&&col===FINISH_NODE_COL,distance:Infinity,isVisited:false,isWall:false,previousNode:null};};var getNewGridWithWallToggled=function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread({},node,{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;};","map":{"version":3,"sources":["/Users/samadeepsengupta/Library/Mobile Documents/com~apple~CloudDocs/Projects/PathfindingVisualiser/Pathfinding-Visualizer-Tutorial/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","grid","mouseIsPressed","getInitialGrid","setState","row","col","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","startNode","finishNode","animateDijkstra","visualizeDijkstra","map","rowIdx","nodeIdx","isFinish","isStart","isWall","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}